import pathlib , os , secrets , base64 , getpass 
import cryptography 
from cryptography.fernet import Fernet 
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt 

# Lấy khóa từ password 
# sử dụng module secrets để tạo salt -> tăng độ bảo mật
def generate_salt (size = 16) :
    # size là độ dài của salt 
    return secrets.token_bytes(size)

# sử dụng module secrets thay vì random bởi vì nó tạo ra các số ngẫu nhiên mạnh mẽ hơn

# Tạo một hàm tạo khóa từ password và salt 
def derive_key (salt , password) : 
    kdf = Scrypt (salt = salt , length = 32 , n = 2**14 , r = 8 , p = 1) 
    # salt : là giá trị salt
    # length : là độ dài của khóa
    # n : CPU/Memory cost : Điều chỉnh độ khó tính toán, càng cao càng khó crack.
    # r : block size
    return kdf.derive(password.encode())  # trả về khóa dưới dạng byte có độ dài 32

# Load salt từ file 
def load_salt() :
    return open("salt.salt" , "rb").read()

# Tạo khóa từ pass 
def generate_key (password , salt_size = 16 , load_existing_salt = False , save_salt = True ): 
    # Nếu load_existing_salt = True thì load salt từ file salt.salt 
    # Nếu save_salt = True thì tạo salt và lưu salt vào file salt.salt
    if load_existing_salt :
        salt = load_salt()
    elif save_salt : 
        # tạo salt mới 
        salt = generate_salt(salt_size)
        with open("salt.salt" , "wb") as salt_file : 
            salt_file.write(salt)
        # Tạo key từ password và salt
        derived_key = derive_key(salt , password)
        # encode bằng base64 và trả về 
        return base64.urlsafe_b64encode(derived_key)
    
# File encryption 
def encrypt (filename , key) :
    # truyền vào tên file và khóa , sẽ mã hóa file đó và lưu vào file mới
    f = Fernet(key) # tạo một đối tượng fernet với khóa
    with open(filename , "rb") as file : 
        file_data = file.read()
    # encyrpt data 
    encrypted_data = f.encrypt(file_data)
    # viết dữ liệu đã mã hóa vào file . ghi đè tệp gốc bằng nội dung được mã hóa 
    with open (filename , "wb") as file :
        file.write(encrypted_data)

# File decryption
def decrypt (filename , key) :
    f = Fernet(key) 
    with open(filename , "rb") as file : 
        encrypted_data = file.read()
    # giải mã dữ liệu 
    try :
        decrypted_data = f.decrypt(encrypted_data)
    except cryptography.fernet.InvalidToken :
        print("Invalid token , most likely the password is incorrect")
        return 
    with open(filename , "wb") as file : 
        file.write(decrypted_data)

# Encrypting Folders
def encrypt_folder (foldername , key) :
    for child in pathlib.Path(foldername).glob("*") : # lấy tất cả các file trong thư mục
        if child.is_file() : 
            print(f'[*] Encryping {child.name}') 
            encrypt(child , key)   
        elif child.is_dir() :
            encrypt_folder(child , key) # đệ quy 

# Decrypting Folders
def decrypt_folder  (folder_name , key) : 
    for child in pathlib.Path(folder_name).glob('*') :
        if child.is_file() : 
            print(f"[*] Decrypting {child.name}")
            decrypt(child , key)
        elif child.is_dir() :
            decrypt_folder(child , key)

# main function
# sử dụng module argparse để tạo các argument cho script , giúp sử dụng hơn cho command line 
if __name__ == "__main__" : 
    import argparse # thư viện dùng để phân tích các tham số dòng lệnh 
    parser = argparse.ArgumentParser(description = "File Encryptor Script with Password")
    parser.add_argument("path" , help= "Path to encrypt or decrypt , can be a file or an entire folder")
    parser.add_argument("-s" , "--salt-size" ,help= "If this is set , a new salt with the passed size is generated" , type = int)
    parser.add_argument("-e" , "--encrypt" , action = "store_true" , help="Whether to encrypt the file/folder , only -e or -d can be specified")
    parser.add_argument("-d" , "--decrypt" , action = "store_true" , help="Whether to decrypt the file/folder , only -e or -d can be specified")
    args = parser.parse_args() # lấy các giá trị từ command line
    if args.encrypt :
        password = getpass.getpass("Enter password for encryption : ") 
    elif args.decrypt :
        password = getpass.getpass("Enter password for decryption : ")
    if args.salt_size : 
        key = generate_key(password , salt_size=args.salt_size , save_salt=True)
    else :
        key = generate_key(password , load_existing_salt=True)
    encrypt_ = args.encrypt # True nếu encrypt được chọn
    decrypt_ = args.decrypt # True nếu decrypt được chọn
    # Nếu cả hai tham số đều được chọn thì in ra lỗi - chỉ được chọn một trong hai
    if encrypt_ and decrypt_ : 
        raise TypeError("Please specify whether you want to encrypt the file or decrypt it") 
    elif encrypt_ :
        if os.path.isfile(args.path) :
            encrypt(args.path , key)
        elif os.path.isdir(args.path) :
            encrypt_folder(args.path , key)
    elif decrypt_ :
        if os.path.isfile(args.path) :
            decrypt(args.path , key)
        elif os.path.isdir(args.path) :
            decrypt_folder(args.path , key)
    else : 
        raise TypeError("Please specify whether you want to encrypt the file or decrypt it")
